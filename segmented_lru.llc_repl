#include "cache.h"
// #define PROTECTED_SIZE LLC_WAYS / 2
// #define PROBATION_SIZE LLC_WAYS - PROTECTED_SIZE

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    return seg_victim(cpu, instr_id, set, current_set, ip, full_addr, type);
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return seg_update(set, way, hit);
}

uint32_t CACHE::seg_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;
    for (way = 0; way < NUM_WAY; way++)
    {
        if (block[set][way].valid == false)
        {
            return way;
        }
    }
    int min_way = -1;
    for (way = 0; way < NUM_WAY; way++)
    {
        if (!block[set][way].is_protected)
        {
            min_way = way;
            break;
        }
    }
    if (min_way != -1)
    {
        for (way = 0; way < NUM_WAY; way++)
        {
            if (!block[set][way].is_protected && (block[set][way].lru > block[set][min_way].lru))
            {
                min_way = way;
            }
        }
    }
    else
    {
        min_way = 0;
        for (way = 0; way < NUM_WAY; way++)
        {
            if (block[set][way].lru > block[set][min_way].lru)
            {
                min_way = way;
            }
        }
    }
    return min_way;
}

void CACHE::seg_update(uint32_t set, uint32_t way, uint8_t hit)
{

    if (block[set][way].is_protected)
    {
        for (uint32_t i = 0; i < NUM_WAY; i++)
        {
            if ((block[set][i].lru < block[set][way].lru) && block[set][i].is_protected)
            {
                block[set][i].lru++;
            }
        }
        block[set][way].lru = 0;
    }
    // // update lru replacement state
    // for (uint32_t i=0; i<NUM_WAY; i++) {
    //     if (block[set][i].lru < block[set][way].lru) {
    //         block[set][i].lru++;
    //     }
    // }
    // block[set][way].lru = 0; // promote to the MRU position

    else
    {
        if (hit)
        {
            block[set][way].is_protected = true;
            for (uint32_t i = 0; i < NUM_WAY; i++)
            {
                if ((block[set][i].lru > block[set][way].lru) && !block[set][i].is_protected)
                {
                    block[set][i].lru--;
                }
            }

            for (uint32_t i = 0; i < NUM_WAY; i++)
            {
                if (block[set][i].is_protected)
                {
                    block[set][i].lru++;
                }
            }
            block[set][way].lru = 0;
        }
        else
        {
            for (uint32_t i = 0; i < NUM_WAY; i++)
            {
                if ((block[set][i].lru < block[set][way].lru) && !block[set][i].is_protected)
                {
                    block[set][i].lru++;
                }
            }
            block[set][way].lru = 0;
        }
    }
}

void CACHE::llc_replacement_final_stats()
{
}
